{
  "version": 3,
  "sources": ["../node_modules/custom-elements-hmr-polyfill/src/package/reflow-strategy/rerenderInnerHTML.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/polyfill/hmrCache.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/polyfill/createHookClass.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/polyfill/patch.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/polyfill/constructInstance.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/polyfill/overrideCustomElementDefine.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/polyfill/onCustomElementChange.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/polyfill/reflowStrategy.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/polyfill/createHookElementChangeListener.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/polyfill/applyPolyfill.ts", "../node_modules/custom-elements-hmr-polyfill/src/package/index.ts", "../src/app-root.ts", "../src/index.ts", "../node_modules/lit-html/src/lib/directive.ts", "../node_modules/lit-html/src/lib/dom.ts", "../node_modules/lit-html/src/lib/part.ts", "../node_modules/lit-html/src/lib/template.ts", "../node_modules/lit-html/src/lib/template-instance.ts", "../node_modules/lit-html/src/lib/template-result.ts", "../node_modules/lit-html/src/lib/parts.ts", "../node_modules/lit-html/src/lib/default-template-processor.ts", "../node_modules/lit-html/src/lib/template-factory.ts", "../node_modules/lit-html/src/lib/render.ts", "../node_modules/lit-html/src/lit-html.ts", "../node_modules/@simple-html/core/src/requestRender.ts", "../node_modules/@simple-html/core/src/symbols.ts", "../node_modules/@simple-html/core/src/property.ts", "../node_modules/@simple-html/core/src/customElement.ts", "../node_modules/@simple-html/core/src/transmitter.ts", "../node_modules/@simple-html/core/src/state.ts", "../src/ifc-reader/parser.ts", "../src/ifc-reader/ifc-reader.ts"],
  "sourcesContent": [null, null, null, null, null, null, null, null, null, null, null, "import { html } from \"lit-html\";\r\nimport { customElement } from \"@simple-html/core\";\r\nimport './ifc-reader/ifc-reader';\r\n\r\n@customElement(\"app-root\")\r\nexport default class extends HTMLElement {\r\n  public render() {\r\n    return html`\r\n            \r\n            <ifc-reader class=\"p-2\"></ifc-reader>\r\n    \r\n\r\n      `;\r\n  }\r\n}\r\n", "// only use hmr if development\r\ndeclare let DEVELOPMENT: boolean;\r\nif (DEVELOPMENT) {\r\n  const { applyPolyfill } = require(\"custom-elements-hmr-polyfill\");\r\n  applyPolyfill();\r\n}\r\n\r\n// load out elements\r\nimport(\"./app-root\").then(() => {\r\n  if (document.body) {\r\n    document.body.innerHTML = \"<app-root></app-root>\";\r\n  }\r\n});\r\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n", "/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\ndeclare const trustedTypes: typeof window.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes!.createPolicy('lit-html', {createHTML: (s) => s});\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value) as unknown as string;\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    const parts = this.parts;\n\n    // If we're assigning an attribute via syntax like:\n    //    attr=\"${foo}\"  or  attr=${foo}\n    // but not\n    //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n    // then we don't want to coerce the attribute value into one long\n    // string. Instead we want to just return the value itself directly,\n    // so that sanitizeDOMValue can get the actual value rather than\n    // String(value)\n    // The exception is if v is an array, in which case we do want to smash\n    // it together into a string without calling String() on the array.\n    //\n    // This also allows trusted values (when using TrustedTypes) being\n    // assigned to DOM sinks without being stringified in the process.\n    if (l === 1 && strings[0] === '' && strings[1] === '') {\n      const v = parts[0].value;\n      if (typeof v === 'symbol') {\n        return String(v);\n      }\n      if (typeof v === 'string' || !isIterable(v)) {\n        return v;\n      }\n    }\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    if (this.startNode.parentNode === null) {\n      return;\n    }\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: readonly string[];\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: readonly string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n  try {\n    const options = {\n      get capture() {\n        eventOptionsSupported = true;\n        return false;\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.addEventListener('test', options as any, options);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.removeEventListener('test', options as any, options);\n  } catch (_e) {\n    // event options not supported\n  }\n})();\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n", "/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n  (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');\n}\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n", "// simple helper to delay re-render\r\nexport function requestRender(ctx: any) {\r\n    if (ctx.isConnected) {\r\n        if (ctx.__wait) {\r\n        } else {\r\n            ctx.__wait = true;\r\n            requestAnimationFrame(async () => {\r\n                await Promise.resolve(true);\r\n                ctx.render.call(ctx);\r\n                ctx.__wait = false;\r\n            });\r\n        }\r\n    }\r\n}\r\n", "export function initSymbolCache() {\r\n    if (!(globalThis as any)._STD_SYMBOL) {\r\n        (globalThis as any)._STD_SYMBOL = {\r\n            observedAttributesMap: Symbol('observedAttributesMap'),\r\n            observedAttributes: Symbol('observedAttributes'),\r\n            updateCallbackCallers: Symbol('updateCallbackCallers'),\r\n            disconnectCallbackCaller: Symbol('disconnectCallbackCaller'),\r\n            constructorDone: Symbol('constructorDone'),\r\n            transmitter: Symbol('transmitter')\r\n        };\r\n        (globalThis as any)._PROP_SYMBOL = {};\r\n    }\r\n}\r\n\r\nfunction stdSymbol() {\r\n    return (globalThis as any)._STD_SYMBOL;\r\n}\r\n\r\nfunction propSymbol() {\r\n    return (globalThis as any)._PROP_SYMBOL;\r\n}\r\n\r\nexport function getObservedAttributesMapSymbol(): 'getObservedAttributesMapSymbol' {\r\n    return stdSymbol().observedAttributesMap;\r\n}\r\n\r\nexport function getObservedAttributesSymbol(): 'getObservedAttributesSymbol' {\r\n    return stdSymbol().observedAttributes;\r\n}\r\n\r\nexport function getUpdateCallbackCallersSymbol(): 'getUpdateCallbackCallersSymbol' {\r\n    return stdSymbol().updateCallbackCallers;\r\n}\r\n\r\nexport function getDisconnectCallbackCallerSymbol(): 'getDisconnectCallbackCallerSymbol' {\r\n    return stdSymbol().disconnectCallbackCaller;\r\n}\r\n\r\nexport function getConstructorDoneSymbol(): 'getConstructorDoneSymbol' {\r\n    return stdSymbol().constructorDone;\r\n}\r\nexport function getTransmitterSymbol(): 'getTransmitterSymbol' {\r\n    return stdSymbol().transmitter;\r\n}\r\n\r\nexport function getPropSymbol(name: string) {\r\n    if (!propSymbol()[name]) {\r\n        propSymbol()[name] = Symbol(name);\r\n        return propSymbol()[name];\r\n    } else {\r\n        return propSymbol()[name];\r\n    }\r\n}\r\n\r\ninitSymbolCache();\r\n", "import { requestRender } from './requestRender';\r\nimport { getConstructorDoneSymbol, getPropSymbol } from './symbols';\r\n\r\n/**\r\n * @property decorator\r\n *\r\n */\r\nexport function property(options: { skipRender: boolean } = {} as any) {\r\n    return function reg(_class: any, prop: string): void {\r\n        Object.defineProperty(_class, prop, {\r\n            get: function () {\r\n                return this[getPropSymbol(this.tagName + '_' + prop)];\r\n            },\r\n            set: function (x: any) {\r\n                const oldValue = this[getPropSymbol(this.tagName + '_' + prop)];\r\n                this[getPropSymbol(this.tagName + '_' + prop)] = x;\r\n                if (this[getConstructorDoneSymbol()]) {\r\n                    if (this.valuesChangedCallback && oldValue !== x) {\r\n                        this.valuesChangedCallback.call(this, 'property', prop, oldValue, x);\r\n                    }\r\n                    if (oldValue !== x && !options.skipRender) {\r\n                        requestRender(this);\r\n                    }\r\n                }\r\n            },\r\n            configurable: true\r\n        });\r\n    };\r\n}\r\n", "import { render } from 'lit-html';\r\nimport {\r\n    getObservedAttributesSymbol,\r\n    getObservedAttributesMapSymbol,\r\n    getConstructorDoneSymbol,\r\n    getDisconnectCallbackCallerSymbol,\r\n    getUpdateCallbackCallersSymbol\r\n} from './symbols';\r\n\r\n/**\r\n * @customElement- decorator\r\n * only log if method is not standard, else its just\r\n */\r\nexport function customElement(elementName: string, extended?: ElementDefinitionOptions) {\r\n    return function reg(elementClass: any) {\r\n        const observedAttributes = elementClass.observedAttributes;\r\n        Object.defineProperty(elementClass, 'observedAttributes', {\r\n            set: function (value) {\r\n                elementClass.prototype[getObservedAttributesSymbol()] = value;\r\n                return true;\r\n            },\r\n            get: function () {\r\n                return elementClass.prototype[getObservedAttributesSymbol()];\r\n            },\r\n            configurable: true\r\n        });\r\n\r\n        if (Array.isArray(observedAttributes) && Array.isArray(elementClass.observedAttributes)) {\r\n            elementClass.observedAttributes = elementClass.observedAttributes.concat(\r\n                observedAttributes\r\n            );\r\n        }\r\n        // if @attribute is not used we just use the standard if any\r\n        if (Array.isArray(observedAttributes) && !Array.isArray(elementClass.observedAttributes)) {\r\n            elementClass.observedAttributes = observedAttributes;\r\n        }\r\n\r\n        const Base: any = class extends elementClass {\r\n            ['updateCallbackCallersSymbol']: (() => void)[];\r\n            ['getDisconnectCallbackCallerSymbol']: (() => void)[];\r\n            ['getConstructorDoneSymbol']: boolean;\r\n\r\n            constructor(...result: any[]) {\r\n                super(...result);\r\n                // lets have this to know if constructor is done or not\r\n                // this way we can skip prop attribute changed values happing before constructor\r\n                this[getUpdateCallbackCallersSymbol()] = [];\r\n                this[getDisconnectCallbackCallerSymbol()] = [];\r\n                this[getConstructorDoneSymbol()] = true;\r\n            }\r\n\r\n            render(...result: any[]) {\r\n                if (super.render) {\r\n                    const template = super.render.call(this, ...result);\r\n                    if (!template?.then) {\r\n                        render(template, this as any, { eventContext: this as any });\r\n                        const callers = this[getUpdateCallbackCallersSymbol()];\r\n                        if (super.updatedCallback || (callers && callers.length)) {\r\n                            //delay so it actually get a chance to update\r\n                            requestAnimationFrame(() => {\r\n                                if (callers && callers.length) {\r\n                                    callers.forEach((call: () => void) => call());\r\n                                }\r\n                                this[getUpdateCallbackCallersSymbol()] = [];\r\n                                if (super.updatedCallback) {\r\n                                    super.updatedCallback.call(this);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        Promise.resolve(template).then((templates) => {\r\n                            render(templates, this as any, { eventContext: this as any });\r\n                            const callers = this[getUpdateCallbackCallersSymbol()];\r\n                            if (super.updatedCallback || (callers && callers.length)) {\r\n                                //delay so it actually get a chance to update\r\n                                requestAnimationFrame(() => {\r\n                                    if (callers && callers.length) {\r\n                                        callers.forEach((call: () => void) => call());\r\n                                    }\r\n                                    this[getUpdateCallbackCallersSymbol()] = [];\r\n                                    if (super.updatedCallback) {\r\n                                        super.updatedCallback.call(this);\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            adoptedCallback(...result: any[]) {\r\n                if (super.adoptedCallback) {\r\n                    super.adoptedCallback.call(this, ...result);\r\n                }\r\n            }\r\n\r\n            connectedCallback(...result: any[]) {\r\n                if (super.connectedCallback) {\r\n                    super.connectedCallback.call(this, ...result);\r\n                }\r\n                this.render(this);\r\n            }\r\n\r\n            /**\r\n             * FOR INTERNAL USE ONLY! use disconnectedCallback helper function\r\n             * register for disconnectCallback event\r\n             * @param call\r\n             */\r\n            internalRegisterDisconnectCallback(call: () => void) {\r\n                if (this[getDisconnectCallbackCallerSymbol()]) {\r\n                    this[getDisconnectCallbackCallerSymbol()].push(call);\r\n                } else {\r\n                    console.warn('you tried to reregister disconnect callback when not allowed');\r\n                }\r\n            }\r\n\r\n            /**\r\n             * FOR INTERNAL USE ONLY! use updatedCallback helper function\r\n             * register for next callback event - only once\r\n             * @param call\r\n             */\r\n            internalRegisterUpdatedCallback(call: () => void) {\r\n                if (this[getUpdateCallbackCallersSymbol()]) {\r\n                    this[getUpdateCallbackCallersSymbol()].push(call);\r\n                } else {\r\n                    console.warn('you tried to reregister updated callback when not allowed');\r\n                }\r\n            }\r\n\r\n            disconnectedCallback(...result: any[]) {\r\n                this[getUpdateCallbackCallersSymbol()] = null; // set to null, so they cant reregister\r\n                const callers = this[getDisconnectCallbackCallerSymbol()];\r\n                this[getDisconnectCallbackCallerSymbol()] = null; // set to null, so they cant reregister\r\n                if (callers.length) {\r\n                    callers.forEach((call: () => void) => call());\r\n                }\r\n\r\n                if (super.disconnectedCallback) {\r\n                    super.disconnectedCallback.call(this, ...result);\r\n                }\r\n            }\r\n\r\n            attributeChangedCallback(name: string, oldValue: string, newValue: string) {\r\n                if (!this[getObservedAttributesMapSymbol()]) {\r\n                    const attribute = name\r\n                        .replace(/([a-z])([A-Z])/g, '$1-$2')\r\n                        .replace(/\\s+/g, '-')\r\n                        .toLowerCase();\r\n                    this[getObservedAttributesMapSymbol()] = new Map();\r\n                    this[getObservedAttributesMapSymbol()].set(attribute, name);\r\n                }\r\n\r\n                const nameProp = this[getObservedAttributesMapSymbol()].get(name);\r\n                this[nameProp] = newValue || '';\r\n\r\n                // if normal attributeChanged is set\r\n                if (super.attributeChangedCallback) {\r\n                    super.attributeChangedCallback.call(this, name, oldValue, newValue);\r\n                }\r\n                //if our simpler method is set (this is used by the @attribute and @property decorators)\r\n                if (super.valuesChangedCallback) {\r\n                    super.valuesChangedCallback.call(this, 'attribute', name, oldValue, newValue);\r\n                }\r\n            }\r\n        };\r\n        if (!customElements.get(elementName)) {\r\n            if (extended) {\r\n                customElements.define(elementName, Base, extended);\r\n            } else {\r\n                customElements.define(elementName, Base);\r\n            }\r\n        } else {\r\n            if ((globalThis as any).hmrCache) {\r\n                if (extended) {\r\n                    customElements.define(elementName, Base, extended);\r\n                } else {\r\n                    customElements.define(elementName, Base);\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n", "import { getTransmitterSymbol } from './symbols';\r\n\r\n// we need this to survive hmr so parts can unsubsribe\r\nif (!(globalThis as any)[getTransmitterSymbol()]) {\r\n    (globalThis as any)[getTransmitterSymbol()] = {};\r\n}\r\n\r\nfunction transmitter() {\r\n    return (globalThis as any)[getTransmitterSymbol()];\r\n}\r\n\r\n// microtask\r\nexport function publish(channel: string, ...args: any[]): void {\r\n    // todo: use queueMicrotask instead? https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask\r\n    // what do I gain by using it?\r\n    Promise.resolve().then(() => {\r\n        if (Array.isArray(transmitter()[channel])) {\r\n            for (let i = 0, len = transmitter()[channel].length; i < len; i++) {\r\n                if (transmitter()[channel][i]) {\r\n                    const ctx = transmitter()[channel][i].ctx;\r\n                    transmitter()[channel][i].func.apply(ctx, args);\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// sync\r\nexport function publishSync(channel: string, ...args: any[]): void {\r\n    if (Array.isArray(transmitter()[channel])) {\r\n        for (let i = 0, len = transmitter()[channel].length; i < len; i++) {\r\n            if (transmitter()[channel][i]) {\r\n                const ctx = transmitter()[channel][i].ctx;\r\n                transmitter()[channel][i].func.apply(ctx, args);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// next task, do I also want a middle ground? requestAnimation frame?\r\nexport function publishNext(channel: string, ...args: any[]): void {\r\n    setTimeout(() => {\r\n        if (Array.isArray(transmitter()[channel])) {\r\n            for (let i = 0, len = transmitter()[channel].length; i < len; i++) {\r\n                if (transmitter()[channel][i]) {\r\n                    const ctx = transmitter()[channel][i].ctx;\r\n                    transmitter()[channel][i].func.apply(ctx, args);\r\n                }\r\n            }\r\n        }\r\n    }, 0);\r\n}\r\n\r\n// sync\r\nexport function unSubscribe(channel: string, ctx: any): void {\r\n    if (Array.isArray(transmitter()[channel])) {\r\n        const events = transmitter()[channel].filter((event: any) => {\r\n            if (event.ctx !== ctx) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        });\r\n        transmitter()[channel] = events;\r\n    }\r\n}\r\n\r\n// sync\r\nexport function subscribe(channel: string, ctx: any, func: (...args: any[]) => void): void {\r\n    if (!Array.isArray(transmitter()[channel])) {\r\n        transmitter()[channel] = [];\r\n    }\r\n    transmitter()[channel].push({ ctx: ctx, func: func });\r\n}\r\n", "import { disconnectedCallback, publish, subscribe, unSubscribe } from './index';\n\nconst state = (window as any).state || {};\nconst keys = new Set();\n\nexport const GLOBAL_STATE_EVENT = 'GLOBAL_STATE_EVENT';\n\n// helper for fusebox hmr event\nif (!(window as any).state) {\n    (window as any).state = {};\n    window.addEventListener('SIMPLE_HTML_SAVE_STATE', () => {\n        (window as any).state = state;\n        console.log('SIMPLE_HTML_HMR', (window as any).state);\n    });\n}\n\n/**\n * Types only\n */\ntype valueSetter<T> = (value: T) => void;\ntype stateResult<T> = [T, valueSetter<T>];\ntype stateResultObj<T> = [T, <K extends keyof T>(part: Pick<T, K>) => void];\n\n/**\n * simple warning if you reuse a key by accident\n * @param key\n */\nexport function validateKey(key: string) {\n    if (keys.has(key)) {\n        throw new Error(`state key used allready, use another name`);\n    } else {\n        keys.add(key);\n        return key;\n    }\n}\n\n// internal object\nconst State = class<T> {\n    mainStateKey: string;\n    isObject: boolean;\n    internalStateKey: string;\n    defaultValue: T;\n\n    /**\n     * Simple global state container\n     * @param STATE_KEY\n     * @param defaultValue\n     * @param isObject\n     * @param internalStateKey if you use internal store then it wont be verified if you override old keys\n     */\n    constructor(\n        STATE_KEY: string,\n        defaultValue: T = null,\n        isObject: boolean,\n        internalStateKey: string | null\n    ) {\n        this.mainStateKey = STATE_KEY;\n        this.defaultValue = defaultValue;\n        if (internalStateKey) {\n            // set main state\n            if (!this.getStateContainer().hasOwnProperty(this.mainStateKey)) {\n                this.getStateContainer()[this.mainStateKey] = {};\n            }\n\n            // set internal state\n            this.internalStateKey = internalStateKey;\n            if (!this.getStateContainer().hasOwnProperty(this.internalStateKey)) {\n                if (typeof defaultValue === 'object' && defaultValue !== null) {\n                    this.getStateContainer()[this.internalStateKey] = defaultValue;\n                } else {\n                    this.getStateContainer()[this.internalStateKey] = {};\n                }\n            }\n        } else {\n            if (!this.getStateContainer().hasOwnProperty(this.mainStateKey)) {\n                this.getStateContainer()[this.mainStateKey] = defaultValue;\n            }\n\n            this.isObject = isObject;\n            if (!this.getStateContainer()[this.mainStateKey] && this.isObject) {\n                this.getStateContainer()[this.mainStateKey] = {};\n            }\n\n            validateKey(this.mainStateKey);\n        }\n    }\n\n    protected getStateContainer() {\n        if (this.internalStateKey) {\n            return state[this.mainStateKey];\n        }\n        return state;\n    }\n\n    /**\n     * Return key of this state\n     * If it have a internal key then its a internal state\n     */\n    protected getStateKey() {\n        return this.internalStateKey || this.mainStateKey;\n    }\n\n    protected resetSimpleState(val: any = this.defaultValue) {\n        if (this.isObject) {\n            throw 'this is object only state, use resetObj';\n        }\n        this.getStateContainer()[this.getStateKey()] = val;\n    }\n\n    protected resetObjectState(val = this.defaultValue) {\n        this.getStateContainer()[this.getStateKey()] = val;\n    }\n\n    /**\n     * return state [value, setter]\n     */\n    protected getSimpleState(): stateResult<T> {\n        if (this.isObject) {\n            throw 'this is object only state, use getObjectValue';\n        }\n\n        const STATE_KEY = this.getStateKey();\n        const STATE = this.getStateContainer();\n        const MAIN_KEY = this.mainStateKey;\n        const INTERNAL_KEY = this.internalStateKey;\n\n        const setAndPublish = function (value: any) {\n            STATE[STATE_KEY] = value;\n            publish(GLOBAL_STATE_EVENT, state, MAIN_KEY, INTERNAL_KEY);\n            publish(STATE_KEY, value);\n        };\n\n        return [STATE[STATE_KEY], setAndPublish];\n    }\n\n    /**\n     * just return simple value\n     */\n    protected getSimpleValue(): T {\n        if (this.isObject) {\n            throw 'this is object only state, use getObject';\n        }\n\n        return this.getStateContainer()[this.getStateKey()];\n    }\n\n    /**\n     * return state [value, setter]\n     * this uses built in object.assign in setter\n     */\n    protected getObjectState(): stateResultObj<T> {\n        const STATE_KEY = this.getStateKey();\n        const STATE = this.getStateContainer();\n        const MAIN_KEY = this.mainStateKey;\n        const INTERNAL_KEY = this.internalStateKey;\n\n        function assignState<T, K extends keyof T>(obj: T, part: Pick<T, K>) {\n            return Object.assign(obj, part);\n        }\n\n        function assignAndPublish<K extends keyof T>(part: Pick<T, K>): void {\n            STATE[STATE_KEY] = assignState(STATE[STATE_KEY] as T, part);\n            publish(GLOBAL_STATE_EVENT, state, MAIN_KEY, INTERNAL_KEY);\n            publish(STATE_KEY, STATE[STATE_KEY]);\n        }\n\n        return [STATE[STATE_KEY], assignAndPublish];\n    }\n\n    /**\n     * just return simple value, of object type\n     */\n    protected getObjectValue(): T {\n        return this.getStateContainer()[this.getStateKey()];\n    }\n\n    public getValue() {\n        if (this.isObject) {\n            return this.getObjectValue();\n        } else {\n            return this.getSimpleValue();\n        }\n    }\n\n    public reset(x: any) {\n        if (this.isObject) {\n            return this.resetObjectState(x);\n        } else {\n            return this.resetSimpleState(x);\n        }\n    }\n\n    /**\n     * connect to state in elements connectedcallback, will automatically disconnect if dicconnectedcallback is called\n     * @param context\n     * @param callback\n     */\n    public connectStateChanges(context: HTMLElement, callback: () => void): void {\n        // this register callback with simpleHtml elements disconnected callback\n        disconnectedCallback(context, () => unSubscribe(this.getStateKey(), context));\n\n        // for following the event we just use the internal event handler\n        subscribe(this.getStateKey(), context, callback);\n    }\n};\n\nexport class ObjectState<T> extends State<T> {\n    constructor(STATE_KEY: string, defaultValue: T = {} as T) {\n        super(STATE_KEY, defaultValue, true, null);\n    }\n\n    public getState(): stateResultObj<T> {\n        return this.getObjectState();\n    }\n\n    public getSetter() {\n        const [, setter] = this.getObjectState();\n        return setter;\n    }\n    public setValue<K extends keyof T>(part: Pick<T, K>): void {\n        const [, setter] = this.getObjectState();\n        setter(part);\n    }\n}\n\nexport class SimpleState<T> extends State<T> {\n    constructor(STATE_KEY: string, defaultValue: T = null) {\n        super(STATE_KEY, defaultValue, false, null);\n    }\n    public getState(): stateResult<T> {\n        return this.getSimpleState();\n    }\n\n    public getSetter() {\n        const [, setter] = this.getSimpleState();\n        return setter;\n    }\n    public setValue(value: any): void {\n        const [, setter] = this.getSimpleState();\n        setter(value);\n    }\n}\n\nexport class ObjectStateInternal<T> extends State<T> {\n    constructor(STATE_KEY: string, defaultValue: T = {} as T, internalProp: string) {\n        super(STATE_KEY, defaultValue, true, internalProp);\n    }\n    public getState(): stateResultObj<T> {\n        return this.getObjectState();\n    }\n\n    public getSetter() {\n        const [, setter] = this.getObjectState();\n        return setter;\n    }\n    public setValue<K extends keyof T>(part: Pick<T, K>): void {\n        const [, setter] = this.getObjectState();\n        setter(part);\n    }\n}\n\nexport class SimpleStateInternal<T> extends State<T> {\n    constructor(STATE_KEY: string, defaultValue: T = null, internalProp: string) {\n        super(STATE_KEY, defaultValue, false, internalProp);\n    }\n    public getState(): stateResult<T> {\n        return this.getSimpleState();\n    }\n    public getSetter() {\n        const [, setter] = this.getSimpleState();\n        return setter;\n    }\n    public setValue(value: any): void {\n        const [, setter] = this.getSimpleState();\n        setter(value);\n    }\n}\n", "export class Lexer {\r\n  pos: number;\r\n  buf: any;\r\n  buflen: number;\r\n  optable: { \",\": string; \"(\": string; \")\": string };\r\n\r\n  constructor() {\r\n    this.pos = 0;\r\n    this.buf = null;\r\n    this.buflen = 0;\r\n\r\n    // Operator table, mapping operator -> token name\r\n    this.optable = {\r\n      \",\": \"COMMA\",\r\n      \"(\": \"L_PAREN\",\r\n      \")\": \"R_PAREN\",\r\n    };\r\n  }\r\n\r\n  input(buf) {\r\n    this.pos = 0;\r\n    this.buf = buf;\r\n    this.buflen = buf.length;\r\n  }\r\n\r\n  nextToken = function () {\r\n    this.skipTokens();\r\n\r\n    if (this.pos >= this.buflen) {\r\n      return null;\r\n    }\r\n\r\n    var c = this.buf.charAt(this.pos);\r\n\r\n    var op = this.optable[c];\r\n    if (op !== undefined) {\r\n      return { name: op, value: c, pos: this.pos++ };\r\n    } else {\r\n      // Not an operator - so it's the beginning of another token.\r\n      switch (true) {\r\n        case this.isID(c):\r\n          return this.processID();\r\n        case this.isArg(c):\r\n          return this.processIdentifier();\r\n        case c === \"'\":\r\n          return this.processString();\r\n        default:\r\n          throw \"unknow token\" + c;\r\n      }\r\n    }\r\n  };\r\n\r\n  isID(c) {\r\n    return c === \"#\";\r\n  }\r\n\r\n  isNewLine(c) {\r\n    return c === \"\\r\" || c === \"\\n\";\r\n  }\r\n\r\n  isDigit(c) {\r\n    return c >= \"0\" && c <= \"9\";\r\n  }\r\n\r\n  isArg(c) {\r\n    return (\r\n      (c >= \"a\" && c <= \"z\") ||\r\n      (c >= \"A\" && c <= \"Z\") ||\r\n      (c >= \"0\" && c <= \"9\") ||\r\n      c === \"_\" ||\r\n      c === \"-\" ||\r\n      c === \"*\" ||\r\n      c === \"$\" ||\r\n      c === \":\" ||\r\n      c === \".\"\r\n    );\r\n  }\r\n\r\n  processID() {\r\n    var endpos = this.pos + 1;\r\n    while (endpos < this.buflen && this.isDigit(this.buf.charAt(endpos))) {\r\n      endpos++;\r\n    }\r\n\r\n    var tok = {\r\n      name: \"ID\",\r\n      value: this.buf.substring(this.pos, endpos),\r\n      pos: this.pos,\r\n    };\r\n    this.pos = endpos;\r\n    return tok;\r\n  }\r\n\r\n  processNumber() {\r\n    var endpos = this.pos + 1;\r\n    while (endpos < this.buflen && this.isDigit(this.buf.charAt(endpos))) {\r\n      endpos++;\r\n    }\r\n\r\n    var tok = {\r\n      name: \"NUMBER\",\r\n      value: this.buf.substring(this.pos, endpos),\r\n      pos: this.pos,\r\n    };\r\n    this.pos = endpos;\r\n    return tok;\r\n  }\r\n\r\n  processIdentifier() {\r\n    var endpos = this.pos + 1;\r\n    while (endpos < this.buflen && this.isArg(this.buf.charAt(endpos))) {\r\n      endpos++;\r\n    }\r\n\r\n    var tok = {\r\n      name: \"IDENTIFIER\",\r\n      value: this.buf.substring(this.pos, endpos),\r\n      pos: this.pos,\r\n    };\r\n    this.pos = endpos;\r\n    return tok;\r\n  }\r\n\r\n  processString() {\r\n    var end_index = this.buf.indexOf(\"'\", this.pos + 1);\r\n    if (end_index === -1) {\r\n      throw Error(\"Unterminated STRING at \" + this.pos);\r\n    } else {\r\n      var tok = {\r\n        name: \"STRING\",\r\n        value: this.buf.substring(this.pos + 1, end_index),\r\n        pos: this.pos,\r\n      };\r\n      this.pos = end_index + 1;\r\n      return tok;\r\n    }\r\n  }\r\n\r\n  skipTokens() {\r\n    while (this.pos < this.buflen) {\r\n      var c = this.buf.charAt(this.pos);\r\n      if (\r\n        c === \" \" ||\r\n        c === \"\\t\" ||\r\n        c === \"\\r\" ||\r\n        c === \"\\n\" ||\r\n        c === \",\" ||\r\n        c === \"=\" ||\r\n        c === \";\"\r\n      ) {\r\n        this.pos++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n", "import { html } from \"lit-html\";\r\nimport { customElement, property } from \"@simple-html/core\";\r\nimport { Lexer } from \"./parser\";\r\n\r\n@customElement(\"ifc-reader\")\r\nexport class IFCReader extends HTMLElement {\r\n  @property() atts = \"\";\r\n\r\n  public render() {\r\n    return html`\r\n      <style>\r\n        ifc-reader {\r\n          display: flex;\r\n        }\r\n      </style>\r\n     \r\n\r\n      <input @change=${this.openFile} type=\"file\" />\r\n      ${new Date().toISOString()}\r\n      ${this.atts} \r\n    `;\r\n  }\r\n\r\n  openFile(e: any) {\r\n    console.time(\"file\");\r\n    const file: File = e.target.files[0];\r\n\r\n    const reader = new FileReader();\r\n    const encoder = new TextDecoder();\r\n    const lexer = new Lexer();\r\n    let readFrom = 0;\r\n    let readTo = 0;\r\n    let spareChunk = \"\";\r\n    let dataBlockFound = false;\r\n    const IFC_ID = new Map();\r\n    const IFC_NAME = new Map();\r\n\r\n    window.IFC_ID = IFC_ID;\r\n    window.IFC_NAME = IFC_NAME;\r\n    reader.onload = () => {\r\n      const byteLength = (reader.result as ArrayBuffer).byteLength;\r\n\r\n      while (readTo < byteLength) {\r\n        readTo = readTo + 1024;\r\n        if (readTo >= byteLength) {\r\n          readTo = byteLength;\r\n        }\r\n        const buffer = reader.result.slice(readFrom, readTo) as ArrayBuffer;\r\n        let data = encoder.decode(buffer);\r\n        if (spareChunk) {\r\n          data = spareChunk + data;\r\n          spareChunk = \"\";\r\n        }\r\n\r\n        const rows = data.split(\"\\n\");\r\n        rows.forEach((row) => {\r\n          if (dataBlockFound) {\r\n            let rowData = row;\r\n            if (rowData[rowData.length - 2] !== \";\") {\r\n              spareChunk = spareChunk + \"\\n\" + rowData;\r\n            } else {\r\n              lexer.input(rowData);\r\n              // first is always ID\r\n              let ID = lexer.nextToken();\r\n              let NAME = lexer.nextToken();\r\n              let tokens = [NAME];\r\n              let t;\r\n              while (t !== null) {\r\n                t = lexer.nextToken();\r\n                if (t) {\r\n                  tokens.push(t);\r\n                }\r\n              }\r\n              IFC_ID.set(ID, tokens);\r\n            }\r\n          } else {\r\n            let rowData = row;\r\n\r\n            if (rowData[rowData.length - 2] !== \";\") {\r\n              spareChunk = spareChunk + \"\\n\" + rowData;\r\n            } else {\r\n              if (rowData.trimEnd() === \"DATA;\") {\r\n                spareChunk = \"\";\r\n                dataBlockFound = true;\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        readFrom = readTo;\r\n      }\r\n    };\r\n    reader.onloadend = () => {\r\n      console.timeEnd(\"file\");\r\n      this.atts = window.IFC_ID.size;\r\n    };\r\n    reader.onprogress = (e) => {\r\n      console.log(e);\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
